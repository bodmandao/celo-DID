{
  "language": "Solidity",
  "sources": {
    "contracts/Did.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract DecentralizedIdentity {\n    // Struct to represent an identity\n    struct Identity {\n        string name;\n        uint age;\n        bool exists;\n        bool verified;\n        bool revoked;\n        address owner;\n    }\n\n    // Mapping to store identity details by address\n    mapping(address => Identity) public identities;\n\n    // Mapping to store addresses of identities by index\n    mapping(uint => address) public identitiesByIndex;\n\n    // Counter to keep track of the number of identities\n    uint public identityCount;\n\n    // Events to log identity-related actions\n    event IdentityCreated(address indexed owner, string name, uint age);\n    event IdentityUpdated(address indexed owner, string newName, uint newAge);\n    event IdentityVerified(address indexed owner);\n    event IdentityRevoked(address indexed owner);\n    event IdentityDeleted(address indexed owner);\n\n    /**\n     * @dev Modifier to ensure that the caller is the owner of the identity\n     */\n    modifier onlyIdentityOwner() {\n        require(identities[msg.sender].exists, \"Identity does not exist\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to ensure that the caller is a verified identity\n     */\n    modifier onlyVerifier() {\n        require(identities[msg.sender].exists && identities[msg.sender].verified, \"Not a verified identity\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to ensure that the caller is a verified identity eligible to revoke another identity\n     * @param identityOwner The address of the identity to be revoked\n     */\n    modifier onlyRevoker(address identityOwner) {\n        require(identities[msg.sender].exists && identities[msg.sender].verified, \"Not a verified identity\");\n        require(identities[identityOwner].exists && !identities[identityOwner].revoked, \"Identity not valid for revocation\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to ensure that the caller is a verified identity eligible to delete another identity\n     * @param identityOwner The address of the identity to be deleted\n     */\n    modifier onlyDeleter(address identityOwner) {\n        require(identities[msg.sender].exists && identities[msg.sender].verified, \"Not a verified identity\");\n        require(identities[identityOwner].exists, \"Identity not valid for deletion\");\n        _;\n    }\n\n    /**\n     * @dev Function to create a new identity\n     * @param name The name of the identity\n     * @param age The age of the identity\n     */\n    function createIdentity(string memory name, uint age) external {\n        require(!identities[msg.sender].exists, \"Identity already exists\");\n        require(bytes(name).length > 0, \"Name cannot be empty\");\n\n        identities[msg.sender] = Identity(name, age, true, false, false,msg.sender);\n        identitiesByIndex[identityCount + 1] = msg.sender;\n        identityCount++;\n\n        emit IdentityCreated(msg.sender, name, age);\n    }\n\n    /**\n     * @dev Function to update an identity\n     * @param newName The new name of the identity\n     * @param newAge The new age of the identity\n     */\n    function updateIdentity(string memory newName, uint newAge) external onlyIdentityOwner {\n        require(bytes(newName).length > 0, \"Name cannot be empty\");\n\n        identities[msg.sender].name = newName;\n        identities[msg.sender].age = newAge;\n\n        emit IdentityUpdated(msg.sender, newName, newAge);\n    }\n\n    /**\n     * @dev Function to verify an identity\n     */\n    function verifyIdentity() external {\n        require(!identities[msg.sender].verified, \"Identity already verified\");\n\n        identities[msg.sender].verified = true;\n\n        emit IdentityVerified(msg.sender);\n    }\n\n    /**\n     * @dev Function to revoke an identity\n     */\n    function revokeIdentity(address identityOwner) external onlyRevoker(identityOwner) {\n        identities[identityOwner].revoked = true;\n\n        emit IdentityRevoked(identityOwner);\n    }\n\n    /**\n * @dev Function to delete an identity\n */\nfunction deleteIdentity() external onlyDeleter(msg.sender) {\n    // Save the index of the identity to be deleted\n    uint indexToDelete = 0;\n    for (uint i = 1; i <= identityCount; i++) {\n        if (identitiesByIndex[i] == msg.sender) {\n            indexToDelete = i;\n            break;\n        }\n    }\n\n    // Ensure the identity is found in the mapping\n    require(indexToDelete != 0, \"Identity not found\");\n\n    // Move the last element to the position of the element to be deleted\n    address lastIdentity = identitiesByIndex[identityCount];\n    identitiesByIndex[indexToDelete] = lastIdentity;\n\n    // Update the index of the moved identity\n    identitiesByIndex[identityCount] = address(0);\n\n    // Delete the identity\n    delete identities[msg.sender];\n\n    // Decrement the identityCount\n    identityCount--;\n\n    emit IdentityDeleted(msg.sender);\n}\n\n\n    /**\n     * @dev Function to get details of all identities\n     * @return An array of Identity structs representing all identities\n     */\n    function getAllIdentities() external view returns (Identity[] memory) {\n        Identity[] memory allIdentities = new Identity[](identityCount);\n\n        for (uint i = 1; i <= identityCount; i++) {\n            address identityOwner = identitiesByIndex[i];\n            allIdentities[i - 1] = identities[identityOwner];\n        }\n\n        return allIdentities;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}